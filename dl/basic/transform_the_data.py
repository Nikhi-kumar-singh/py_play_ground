# -*- coding: utf-8 -*-
"""Untitled6 (3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rU4TwtfurFw4LWlJld_eY9TvoM2H8TN2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as snb
import warnings
warnings.filterwarnings("ignore")
from google.colab import files

from sklearn.preprocessing import (
    StandardScaler,
    LabelEncoder,
    OneHotEncoder
)
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import  train_test_split
import pickle

df=pd.read_csv("/content/Churn_Modelling.csv")

df.head()

df.shape

df.columns

df.info()

df.describe()



df["Surname"].value_counts()

df["Surname"].unique()

df["Surname"].unique().shape

df1=df.drop(["RowNumber","CustomerId","Surname"],axis=1)

df.shape

df1.shape

df1.head()

df["Geography"].value_counts()

df["Gender"].value_counts()

df.isnull().sum()

df.duplicated().sum()

num_features=list(df1.select_dtypes(exclude="O").columns)
col_features=list(df1.select_dtypes(include="O").columns)

num_features,col_features

df.describe()

df.info()

target="Exited"

print(type(target))
print(type(num_features))
print(type(col_features))

if target in num_features:
  num_features.remove(target)

if target in col_features:
  col_features.remove(target)

num_features,col_features

x_train,x_test,y_train,y_test=train_test_split(
    df1.drop(target,axis=1),
    df1[target],
    test_size=0.25,
    random_state=42
)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

x_train.head(),y_train.head()

preprocessor=ColumnTransformer([
    ("standard_scaler",StandardScaler(),num_features),
    ("categorical_scaler",OneHotEncoder(handle_unknown="ignore"),col_features)
])

x_train=preprocessor.fit_transform(x_train)
x_test=preprocessor.transform(x_test)

preprocessor_file_name="preprocessor.pkl"

with open(preprocessor_file_name,"wb") as file:
  pickle.dump(preprocessor,file)

files.download(preprocessor_file_name)

x_train_df=pd.DataFrame(x_train,columns=preprocessor.get_feature_names_out().tolist())
x_test_df=pd.DataFrame(x_test,columns=preprocessor.get_feature_names_out().tolist())

x_train_df.describe()

x_train_df.info()

train_data=pd.concat([x_train_df.reset_index(drop=True),y_train.reset_index(drop=True)],axis=1)
test_data=pd.concat([x_test_df.reset_index(drop=True),y_test.reset_index(drop=True)],axis=1)

train_data.shape

test_data.shape

train_data.head()

df2=pd.concat([x_train_df.reset_index(drop=True),x_test_df.reset_index(drop=True)],axis=0)

df2.shape

df2.head()

df2.columns

test_data.head()

train_file_path="train_data.csv"
test_file_path="test_data.csv"

train_data.to_csv(train_file_path)

test_data.to_csv(test_file_path)

files.download(train_file_path)

files.download(test_file_path)

